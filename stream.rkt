#lang racket
(define-syntax $cons
  (syntax-rules ()
    ((_ a d) (cons a (delay d)))))
(define ($car $)
  (car $))
(define ($cdr $)
  (force (cdr $)))
(define ($map proc $)
  (if (null? $)
      '()
      ($cons (proc ($car $))
             ($map proc ($cdr $)))))
(define ($filter pred $)
  (cond ((null? $) '())
        ((pred ($car $))
         ($cons ($car $) ($filter pred ($cdr $))))
        (else ($filter pred ($cdr $)))))
(define ($ref $ n)
  (if (= n 0)
      ($car $)
      ($ref ($cdr $) (- n 1))))
(define ($take $ n)
  (if (= n 0)
      '()
      (cons ($car $)
            ($take ($cdr $) (- n 1)))))
(define (divides? a b)
  (= (remainder b a) 0))
(define (make-ints n)
  ($cons n (make-ints (+ n 1))))
(define (sieve $)
  ($cons ($car $)
         (sieve ($filter (lambda (x) (not (divides? ($car $) x)))
                         ($cdr $)))))
(define primes
  (sieve (make-ints 2)))